// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spix.Infrastructure;

#nullable disable

namespace Spix.AppBack.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Spix.Core.EntitesSoftSec.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nro_Document")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("FullName", "Nro_Document", "CorporationId")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Spix.Core.EntitesSoftSec.UsuarioRole", b =>
                {
                    b.Property<int>("UsuarioRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioRoleId"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioRoleId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UsuarioId", "UserType")
                        .IsUnique();

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("Spix.Core.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "StateId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Spix.Core.Entities.Corporation", b =>
                {
                    b.Property<int>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorporationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NroDocument")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("SoftPlanId")
                        .HasColumnType("int");

                    b.HasKey("CorporationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SoftPlanId");

                    b.HasIndex("Name", "NroDocument")
                        .IsUnique();

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("Spix.Core.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CodPhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Spix.Core.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nro_Document")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("FullName", "Nro_Document")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Spix.Core.Entities.SoftPlan", b =>
                {
                    b.Property<int>("SoftPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftPlanId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("ClientCount")
                        .HasColumnType("int");

                    b.Property<int>("Meses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SoftPlanId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SoftPlans");
                });

            modelBuilder.Entity("Spix.Core.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("Spix.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Spix.Core.Entities.UserRoleDetails", b =>
                {
                    b.Property<int>("UserRoleDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleDetailsId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserRoleDetailsId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleDetailsId");

                    b.HasIndex("UserType", "UserId")
                        .IsUnique()
                        .HasFilter("[UserType] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("UserRoleDetails");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.ChainType", b =>
                {
                    b.Property<int>("ChainTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChainTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ChainName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ChainTypeId");

                    b.HasIndex("ChainName")
                        .IsUnique();

                    b.ToTable("ChainTypes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChannelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ChannelId");

                    b.HasIndex("ChannelName")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Frecuency", b =>
                {
                    b.Property<int>("FrecuencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrecuencyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("FrecuencyName")
                        .HasColumnType("int");

                    b.Property<int>("FrecuencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("FrecuencyId");

                    b.HasIndex("FrecuencyTypeId", "FrecuencyName")
                        .IsUnique();

                    b.ToTable("Frecuencies");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.FrecuencyType", b =>
                {
                    b.Property<int>("FrecuencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrecuencyTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("FrecuencyTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("FrecuencyTypes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.HotSpotType", b =>
                {
                    b.Property<int>("HotSpotTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotSpotTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("HotSpotTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("HotSpotTypes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Operation", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OperationId");

                    b.HasIndex("OperationName")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Security", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SecurityId");

                    b.HasIndex("SecurityName")
                        .IsUnique();

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Mark", b =>
                {
                    b.Property<Guid>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MarkId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("MarkName", "CorporationId")
                        .IsUnique();

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.MarkModel", b =>
                {
                    b.Property<Guid>("MarkModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MarkModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MarkModelId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("MarkId");

                    b.HasIndex("MarkModelName", "CorporationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkModels");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Plan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpeedDown")
                        .HasColumnType("int");

                    b.Property<int>("SpeedDownType")
                        .HasColumnType("int");

                    b.Property<int>("SpeedUp")
                        .HasColumnType("int");

                    b.Property<int>("SpeedUpType")
                        .HasColumnType("int");

                    b.Property<int>("TasaReuso")
                        .HasColumnType("int");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId");

                    b.HasIndex("PlanCategoryId");

                    b.HasIndex("PlanId");

                    b.HasIndex("TaxId");

                    b.HasIndex("CorporationId", "PlanName");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.PlanCategory", b =>
                {
                    b.Property<Guid>("PlanCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("PlanCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlanCategoryId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("PlanCategoryName", "CorporationId")
                        .IsUnique();

                    b.ToTable("PlanCategories");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WithSerials")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("TaxId");

                    b.HasIndex("CorporationId", "ProductName")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CorporationId", "Name")
                        .IsUnique();

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ServiceCategory", b =>
                {
                    b.Property<Guid>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceCategoryId");

                    b.HasIndex("CorporationId", "Name")
                        .IsUnique();

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ServiceClient", b =>
                {
                    b.Property<Guid>("ServiceClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceClientId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("TaxId");

                    b.HasIndex("CorporationId", "ServiceName")
                        .IsUnique();

                    b.ToTable("ServiceClients");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Tax", b =>
                {
                    b.Property<Guid>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TaxId");

                    b.HasIndex("CorporationId", "Rate")
                        .IsUnique();

                    b.HasIndex("CorporationId", "TaxName")
                        .IsUnique();

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Zone", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ZoneId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("CorporationId", "StateId", "CityId", "ZoneName")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.IpNet", b =>
                {
                    b.Property<Guid>("IpNetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Assigned")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Excluded")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IpNetId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("Ip", "CorporationId")
                        .IsUnique();

                    b.ToTable("IpNets");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.IpNetwork", b =>
                {
                    b.Property<Guid>("IpNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Assigned")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Excluded")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IpNetworkId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("Ip", "CorporationId")
                        .IsUnique();

                    b.ToTable("IpNetworks");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.Node", b =>
                {
                    b.Property<Guid>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("FraseSeguridad")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("FrecuencyId")
                        .HasColumnType("int");

                    b.Property<int?>("FrecuencyTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("IpNetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mac")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarkModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NodesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("int");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NodeId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("FrecuencyId");

                    b.HasIndex("FrecuencyTypeId");

                    b.HasIndex("IpNetworkId");

                    b.HasIndex("MarkId");

                    b.HasIndex("MarkModelId");

                    b.HasIndex("OperationId");

                    b.HasIndex("SecurityId");

                    b.HasIndex("ZoneId");

                    b.HasIndex("NodesName", "CorporationId", "OperationId")
                        .IsUnique();

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Spix.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Spix.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Spix.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spix.Core.EntitesSoftSec.Usuario", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany("Usuarios")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitesSoftSec.UsuarioRole", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitesSoftSec.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Spix.Core.Entities.City", b =>
                {
                    b.HasOne("Spix.Core.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Spix.Core.Entities.Corporation", b =>
                {
                    b.HasOne("Spix.Core.Entities.Country", "Country")
                        .WithMany("Corporations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.Entities.SoftPlan", "SoftPlan")
                        .WithMany("Corporations")
                        .HasForeignKey("SoftPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("SoftPlan");
                });

            modelBuilder.Entity("Spix.Core.Entities.Manager", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany("Managers")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.Entities.State", b =>
                {
                    b.HasOne("Spix.Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Spix.Core.Entities.User", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId");

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.Entities.UserRoleDetails", b =>
                {
                    b.HasOne("Spix.Core.Entities.User", "User")
                        .WithMany("UserRoleDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Frecuency", b =>
                {
                    b.HasOne("Spix.Core.EntitiesData.FrecuencyType", "FrecuencyType")
                        .WithMany("Frecuencies")
                        .HasForeignKey("FrecuencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FrecuencyType");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Mark", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.MarkModel", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.Mark", "Mark")
                        .WithMany("MarkModels")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Plan", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.PlanCategory", "PlanCategory")
                        .WithMany("Plans")
                        .HasForeignKey("PlanCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.Tax", "Tax")
                        .WithMany("Plans")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("PlanCategory");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.PlanCategory", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Product", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.Tax", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("ProductCategory");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ProductCategory", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ServiceCategory", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ServiceClient", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceClients")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.Tax", "Tax")
                        .WithMany("ServiceClients")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("ServiceCategory");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Tax", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Zone", b =>
                {
                    b.HasOne("Spix.Core.Entities.City", "city")
                        .WithMany("Zones")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.Entities.State", "state")
                        .WithMany("Zones")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("city");

                    b.Navigation("state");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.IpNet", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.IpNetwork", b =>
                {
                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.Node", b =>
                {
                    b.HasOne("Spix.Core.EntitiesData.Channel", "Channel")
                        .WithMany("Nodes")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Spix.Core.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesData.Frecuency", "Frecuency")
                        .WithMany("Nodes")
                        .HasForeignKey("FrecuencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Spix.Core.EntitiesData.FrecuencyType", "FrecuencyType")
                        .WithMany("Nodes")
                        .HasForeignKey("FrecuencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Spix.Core.EntitiesNet.IpNetwork", "IpNetwork")
                        .WithMany("Nodes")
                        .HasForeignKey("IpNetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.Mark", "Mark")
                        .WithMany("Nodes")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesGen.MarkModel", "MarkModel")
                        .WithMany("Nodes")
                        .HasForeignKey("MarkModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesData.Operation", "Operation")
                        .WithMany("Nodes")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Core.EntitiesData.Security", "Security")
                        .WithMany("Nodes")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Spix.Core.EntitiesGen.Zone", "Zone")
                        .WithMany("Nodes")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Corporation");

                    b.Navigation("Frecuency");

                    b.Navigation("FrecuencyType");

                    b.Navigation("IpNetwork");

                    b.Navigation("Mark");

                    b.Navigation("MarkModel");

                    b.Navigation("Operation");

                    b.Navigation("Security");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Spix.Core.EntitesSoftSec.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Spix.Core.Entities.City", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Spix.Core.Entities.Corporation", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("UsuarioRoles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Spix.Core.Entities.Country", b =>
                {
                    b.Navigation("Corporations");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Spix.Core.Entities.SoftPlan", b =>
                {
                    b.Navigation("Corporations");
                });

            modelBuilder.Entity("Spix.Core.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Spix.Core.Entities.User", b =>
                {
                    b.Navigation("UserRoleDetails");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Channel", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Frecuency", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.FrecuencyType", b =>
                {
                    b.Navigation("Frecuencies");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Operation", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesData.Security", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Mark", b =>
                {
                    b.Navigation("MarkModels");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.MarkModel", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.PlanCategory", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.ServiceCategory", b =>
                {
                    b.Navigation("ServiceClients");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Tax", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("Products");

                    b.Navigation("ServiceClients");
                });

            modelBuilder.Entity("Spix.Core.EntitiesGen.Zone", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Spix.Core.EntitiesNet.IpNetwork", b =>
                {
                    b.Navigation("Nodes");
                });
#pragma warning restore 612, 618
        }
    }
}
